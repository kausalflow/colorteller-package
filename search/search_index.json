{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for ColorTeller \u00a4 ColorTeller is a package to benchmark color palettes. Teller is plate in German. Install \u00a4 pip install colorteller This will leave out many dependencies but the basic functions will work. To install colorteller together with all the requirements, pip install \"colorteller[all]\" Read Usage and Reading Results for more. ColorTeller Web Service \u00a4 We built a website for us to discover and share color palettes. Website: colorteller.kausalflow.com Source code for the website: kausalflow/colorteller","title":"Overview"},{"location":"#documentation-for-colorteller","text":"ColorTeller is a package to benchmark color palettes. Teller is plate in German.","title":"Documentation for ColorTeller"},{"location":"#install","text":"pip install colorteller This will leave out many dependencies but the basic functions will work. To install colorteller together with all the requirements, pip install \"colorteller[all]\" Read Usage and Reading Results for more.","title":"Install"},{"location":"#colorteller-web-service","text":"We built a website for us to discover and share color palettes. Website: colorteller.kausalflow.com Source code for the website: kausalflow/colorteller","title":"ColorTeller Web Service"},{"location":"changelog/","text":"ColorTeller Changelog \u00a4 2021-11-25, 0.0.2 \u00a4","title":"Changelog"},{"location":"changelog/#colorteller-changelog","text":"","title":"ColorTeller Changelog"},{"location":"changelog/#2021-11-25-002","text":"","title":"2021-11-25, 0.0.2"},{"location":"results/","text":"Reading Results \u00a4 Metrics \u00a4 The metrics are returned as list of dictionaries. For example, if we use methods=[benchmark.LightnessBenchmark] as the metrics argument, we get a length one list for [\"#208eb7\", \"#8bd0eb\", \"#214a65\", \"#52dcbc\"] , [ { 'method' : 'lightness' , 'data' : { 'lightness' : [ 84.91983092093982 , 29.92196529863262 , 84.89371481804541 , 49.84008327873316 , 74.84871458198634 , 59.995102078239626 ], 'min_lightness' : 25 , 'max_lightness' : 85 , 'smaller_than_max' : [ True , True , True , True , True , True ], 'greater_than_min' : [ True , True , True , True , True , True ], 'bounded_by_min_max' : [ True , True , True , True , True , True ] } } ] If multiple benchmarks are provided, i.e., methods=[benchmark.PerceptualDistanceBenchmark, benchmark.LightnessBenchmark] , we get multiple metrics returned as a list. [ { 'method' : 'perceptual_distance' , 'data' : { 'colors' : [ '#8de4d3' , '#344b46' , '#74ee65' , '#238910' , '#a6c363' , '#509d99' ], 'lab' : [( 84.91983092093982 , - 30.077937807876264 , 0.02004498485879136 ), ( 29.92196529863262 , - 10.125651525571849 , 0.11432219452202075 ), ( 84.89371481804541 , - 59.80516907528527 , 55.02104980247336 ), ( 49.84008327873316 , - 49.880004054854155 , 49.88542716044376 ), ( 74.84871458198634 , - 24.89418244566888 , 44.67650807158665 ), ( 59.995102078239626 , - 24.750918732142523 , - 5.256244862912585 )], 'distances' : [[ 0.0 , 51.595487359709644 , 22.65815239947601 , 35.416816157500605 , 23.89289149811552 , 19.300512151508368 ], [ 51.595487359709644 , 0.0 , 56.39906000723282 , 29.903204552554257 , 49.4276053685809 , 30.206424477640848 ], [ 22.658152399476016 , 56.39906000723282 , 0.0 , 28.124661697115705 , 13.768615584198283 , 32.78257261407205 ], [ 35.41681615750062 , 29.903204552554257 , 28.124661697115705 , 0.0 , 23.282610044487893 , 27.59833645833781 ], [ 23.89289149811552 , 49.4276053685809 , 13.768615584198294 , 23.282610044487903 , 0.0 , 28.627463185209976 ], [ 19.300512151508364 , 30.206424477640848 , 32.78257261407205 , 27.5983364583378 , 28.62746318520996 , 0.0 ]], 'noticable' : [[ False , True , True , True , True , True ], [ True , False , True , True , True , True ], [ True , True , False , True , True , True ], [ True , True , True , False , True , True ], [ True , True , True , True , False , True ], [ True , True , True , True , True , False ]] } }, { 'method' : 'lightness' , 'data' : { 'lightness' : [ 84.91983092093982 , 29.92196529863262 , 84.89371481804541 , 49.84008327873316 , 74.84871458198634 , 59.995102078239626 ], 'min_lightness' : 25 , 'max_lightness' : 85 , 'smaller_than_max' : [ True , True , True , True , True , True ], 'greater_than_min' : [ True , True , True , True , True , True ], 'bounded_by_min_max' : [ True , True , True , True , True , True ] } } ] Visualizations \u00a4 Perceptual Distance \u00a4 The following results are the results for [\"#208eb7\", \"#8bd0eb\", \"#214a65\", \"#52dcbc\"] . Distance matrix The deltaE distance matrix is plotted as a heatmap. In general, the larger the distance, the easier for us to distinguish. We ceil all the distance values to 10 in this chart as large distances in L a b space desn't have an intuitive meaning. Noticable Distance Matrix If two colors are two close to each in a perceptual uniform color space, it is hard to distinguish them. This heatmap shows whether any pair of colors are distinguishable. Lightness \u00a4 WIP Not yet visualized. Emperical \u00a4 We will automatically create several charts using the color palette. The following charts are the results for [\"#208eb7\", \"#8bd0eb\", \"#214a65\", \"#52dcbc\"] . Bar chart Donut chart Line chart Scatter plot","title":"Reading Results"},{"location":"results/#reading-results","text":"","title":"Reading Results"},{"location":"results/#metrics","text":"The metrics are returned as list of dictionaries. For example, if we use methods=[benchmark.LightnessBenchmark] as the metrics argument, we get a length one list for [\"#208eb7\", \"#8bd0eb\", \"#214a65\", \"#52dcbc\"] , [ { 'method' : 'lightness' , 'data' : { 'lightness' : [ 84.91983092093982 , 29.92196529863262 , 84.89371481804541 , 49.84008327873316 , 74.84871458198634 , 59.995102078239626 ], 'min_lightness' : 25 , 'max_lightness' : 85 , 'smaller_than_max' : [ True , True , True , True , True , True ], 'greater_than_min' : [ True , True , True , True , True , True ], 'bounded_by_min_max' : [ True , True , True , True , True , True ] } } ] If multiple benchmarks are provided, i.e., methods=[benchmark.PerceptualDistanceBenchmark, benchmark.LightnessBenchmark] , we get multiple metrics returned as a list. [ { 'method' : 'perceptual_distance' , 'data' : { 'colors' : [ '#8de4d3' , '#344b46' , '#74ee65' , '#238910' , '#a6c363' , '#509d99' ], 'lab' : [( 84.91983092093982 , - 30.077937807876264 , 0.02004498485879136 ), ( 29.92196529863262 , - 10.125651525571849 , 0.11432219452202075 ), ( 84.89371481804541 , - 59.80516907528527 , 55.02104980247336 ), ( 49.84008327873316 , - 49.880004054854155 , 49.88542716044376 ), ( 74.84871458198634 , - 24.89418244566888 , 44.67650807158665 ), ( 59.995102078239626 , - 24.750918732142523 , - 5.256244862912585 )], 'distances' : [[ 0.0 , 51.595487359709644 , 22.65815239947601 , 35.416816157500605 , 23.89289149811552 , 19.300512151508368 ], [ 51.595487359709644 , 0.0 , 56.39906000723282 , 29.903204552554257 , 49.4276053685809 , 30.206424477640848 ], [ 22.658152399476016 , 56.39906000723282 , 0.0 , 28.124661697115705 , 13.768615584198283 , 32.78257261407205 ], [ 35.41681615750062 , 29.903204552554257 , 28.124661697115705 , 0.0 , 23.282610044487893 , 27.59833645833781 ], [ 23.89289149811552 , 49.4276053685809 , 13.768615584198294 , 23.282610044487903 , 0.0 , 28.627463185209976 ], [ 19.300512151508364 , 30.206424477640848 , 32.78257261407205 , 27.5983364583378 , 28.62746318520996 , 0.0 ]], 'noticable' : [[ False , True , True , True , True , True ], [ True , False , True , True , True , True ], [ True , True , False , True , True , True ], [ True , True , True , False , True , True ], [ True , True , True , True , False , True ], [ True , True , True , True , True , False ]] } }, { 'method' : 'lightness' , 'data' : { 'lightness' : [ 84.91983092093982 , 29.92196529863262 , 84.89371481804541 , 49.84008327873316 , 74.84871458198634 , 59.995102078239626 ], 'min_lightness' : 25 , 'max_lightness' : 85 , 'smaller_than_max' : [ True , True , True , True , True , True ], 'greater_than_min' : [ True , True , True , True , True , True ], 'bounded_by_min_max' : [ True , True , True , True , True , True ] } } ]","title":"Metrics"},{"location":"results/#visualizations","text":"","title":"Visualizations"},{"location":"results/#perceptual-distance","text":"The following results are the results for [\"#208eb7\", \"#8bd0eb\", \"#214a65\", \"#52dcbc\"] . Distance matrix The deltaE distance matrix is plotted as a heatmap. In general, the larger the distance, the easier for us to distinguish. We ceil all the distance values to 10 in this chart as large distances in L a b space desn't have an intuitive meaning. Noticable Distance Matrix If two colors are two close to each in a perceptual uniform color space, it is hard to distinguish them. This heatmap shows whether any pair of colors are distinguishable.","title":"Perceptual Distance"},{"location":"results/#lightness","text":"WIP Not yet visualized.","title":"Lightness"},{"location":"results/#emperical","text":"We will automatically create several charts using the color palette. The following charts are the results for [\"#208eb7\", \"#8bd0eb\", \"#214a65\", \"#52dcbc\"] . Bar chart Donut chart Line chart Scatter plot","title":"Emperical"},{"location":"usage/","text":"Use the Command Line Tool \u00a4 colorteller benchmark -h \"#8de4d3\" -h \"#344b46\" -h \"#74ee65\" -h \"#238910\" -h \"#a6c363\" -h \"#509d99\" -wbc True -t test_colorteller_cmd -h specifies a color in hex format; -t specifies the folder to hold all the results (charts, metrics json, etc). It should be a folder.; -wbc is True will create benchmark metric charts; Use in Python Code \u00a4 Create a ColorTeller Object \u00a4 from colorteller.teller import ColorTeller hex_strings = [\"#8de4d3\", \"#344b46\", \"#74ee65\", \"#238910\", \"#a6c363\", \"#509d99\"] ct = teller.ColorTeller(hex_strings=hex_strings) To retrieve the properties of the color palette, please refer to colorteller.teller . Create Benchmarks \u00a4 from colorteller.teller import ColorTeller from colorteller.utils import benchmark hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark , benchmark . LightnessBenchmark ] ) Visualizations \u00a4 Metric Visualizations \u00a4 from colorteller import teller from colorteller.utils import benchmark from colorteller.visualize import BenchmarkCharts , ApplicationCharts hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark , benchmark . LightnessBenchmark ] ) charts = BenchmarkCharts ( metrics = m , save_folder = \".\" ) charts . distance_matrix ( show = True ) charts . noticable_matrix ( show = True ) Demo Figures Using the Color Palette \u00a4 from colorteller import teller from colorteller.utils import benchmark from colorteller.visualize import BenchmarkCharts , ApplicationCharts hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) ac = ApplicationCharts ( colors = c , save_folder = \".\" ) ac . charts ( save_to = True ) # One could also create specific charts using the following # ac.bar_chart(show=True) # ac.line_chart(show=True) # ac.scatter_chart(show=True) # ac.donut_chart(show=True)","title":"Usage"},{"location":"usage/#use-the-command-line-tool","text":"colorteller benchmark -h \"#8de4d3\" -h \"#344b46\" -h \"#74ee65\" -h \"#238910\" -h \"#a6c363\" -h \"#509d99\" -wbc True -t test_colorteller_cmd -h specifies a color in hex format; -t specifies the folder to hold all the results (charts, metrics json, etc). It should be a folder.; -wbc is True will create benchmark metric charts;","title":"Use the Command Line Tool"},{"location":"usage/#use-in-python-code","text":"","title":"Use in Python Code"},{"location":"usage/#create-a-colorteller-object","text":"from colorteller.teller import ColorTeller hex_strings = [\"#8de4d3\", \"#344b46\", \"#74ee65\", \"#238910\", \"#a6c363\", \"#509d99\"] ct = teller.ColorTeller(hex_strings=hex_strings) To retrieve the properties of the color palette, please refer to colorteller.teller .","title":"Create a ColorTeller Object"},{"location":"usage/#create-benchmarks","text":"from colorteller.teller import ColorTeller from colorteller.utils import benchmark hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark , benchmark . LightnessBenchmark ] )","title":"Create Benchmarks"},{"location":"usage/#visualizations","text":"","title":"Visualizations"},{"location":"usage/#metric-visualizations","text":"from colorteller import teller from colorteller.utils import benchmark from colorteller.visualize import BenchmarkCharts , ApplicationCharts hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark , benchmark . LightnessBenchmark ] ) charts = BenchmarkCharts ( metrics = m , save_folder = \".\" ) charts . distance_matrix ( show = True ) charts . noticable_matrix ( show = True )","title":"Metric Visualizations"},{"location":"usage/#demo-figures-using-the-color-palette","text":"from colorteller import teller from colorteller.utils import benchmark from colorteller.visualize import BenchmarkCharts , ApplicationCharts hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) ac = ApplicationCharts ( colors = c , save_folder = \".\" ) ac . charts ( save_to = True ) # One could also create specific charts using the following # ac.bar_chart(show=True) # ac.line_chart(show=True) # ac.scatter_chart(show=True) # ac.donut_chart(show=True)","title":"Demo Figures Using the Color Palette"},{"location":"references/","text":"References \u00a4 In this section, we provide the references for the colorteller codebase.","title":"Introduction"},{"location":"references/#references","text":"In this section, we provide the references for the colorteller codebase.","title":"References"},{"location":"references/command/","text":"Command \u00a4","title":"command"},{"location":"references/command/#command","text":"","title":"Command"},{"location":"references/teller/","text":"Teller \u00a4 ColorTeller \u00a4 A middleware for colorteller web service and benchmarking colors. It takes the color representations on the colorteller web service and converts them to an easy-to-use object. There are two different methods to instantiate a ColorTeller object: Provide a list of hex strings. Provide a dictionary or json string from the colorteller web service. Here are some examples: Using a list of hex strings: from colorteller import teller hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) Using a json string: from colorteller import teller ct_raw = '{\"author\":\"KausalFlow\",\"colors\":[{\"hex\":\"#8de4d3\",\"name\":\"\"},{\"hex\":\"#344b46\"},{\"hex\":\"#74ee65\"},{\"hex\":\"#238910\"},{\"hex\":\"#a6c363\"},{\"hex\":\"#509d99\"}],\"date\":1637142696,\"expirydate\":-62135596800,\"file\":\"bobcat-yellow\",\"hex\":[\"8de4d3\",\"344b46\",\"74ee65\",\"238910\",\"a6c363\",\"509d99\"],\"images\":null,\"objectID\":\"e0e129c8ed58316127909db84c67efcb\",\"permalink\":\"//localhost:1234/colors/bobcat-yellow/\",\"publishdate\":\"2021-11-17T10:51:36+01:00\",\"summary\":\"This is an experiment\",\"tags\":null,\"title\":\"Bobcat Yellow\"}' hex_results = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( ct_raw ) Note While we can use this to get some properties of the palette, this is mostly for downstream tasks. Parameters: Name Type Description Default colorteller_raw Union[dict, str] A dict (or json string of dict) of the raw response from colorteller web service, defaults to [DefaultParamVal] required hex_strings list A list of hex strings for the color palette. required hex property readonly \u00a4 a list of hex strings of the palette rgb property readonly \u00a4 a list of rgb tuples of the palette from_hex ( self , hex_strings ) \u00a4 set hex_strings property using a list of hex_strings. There is no return value. The hex_strings property is set using the input. Parameters: Name Type Description Default hex_strings list A list of hex strings for the color palette. required Source code in colorteller/teller.py def from_hex ( self , hex_strings : list ) -> None : \"\"\"set `hex_strings` property using a list of hex_strings. There is no return value. The `hex_strings` property is set using the input. :param hex_strings: A list of hex strings for the color palette. \"\"\" self . hex_strings = hex_strings get_hex_strings ( self , colorteller_raw ) \u00a4 Extract hex_strings from colorteller web service json or dict representation of the color palette. Parameters: Name Type Description Default colorteller_raw Union[dict, str] A dict (or json string of dict) of the raw response from colorteller web service. required Returns: Type Description list A list of hex strings for the color palette. Source code in colorteller/teller.py def get_hex_strings ( self , colorteller_raw : Union [ dict , str , None ]) -> list : \"\"\"Extract hex_strings from colorteller web service json or dict representation of the color palette. :param colorteller_raw: A dict (or json string of dict) of the raw response from colorteller web service. :return: A list of hex strings for the color palette. :rtype: list \"\"\" if colorteller_raw is None : return [] colorteller_raw = colorteller_raw colors_raw = colorteller_raw . get ( \"colors\" , []) self . hex_strings = [ color . get ( \"hex\" ) for color in colors_raw ] return self . hex_strings str_to_json ( data_raw ) staticmethod \u00a4 convert the json string to dictionary Parameters: Name Type Description Default data_raw A json string of the raw response from colorteller web service. required Returns: Type Description dict dictionary of the raw response from colorteller web service. Source code in colorteller/teller.py @staticmethod def str_to_json ( data_raw ): \"\"\"convert the json string to dictionary :param data_raw: A json string of the raw response from colorteller web service. :return: dictionary of the raw response from colorteller web service. :rtype: dict \"\"\" return json . loads ( data_raw ) Colors \u00a4 A color palette container with benchmark results. To instantiate a Colors object, provide a list of hex strings ( color_palette ) or a ColorTeller object ( colorteller ). Warning If colorteller is provided, the color_palette argument will be ignored. from colorteller import teller hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) We could get the metrics from the Colors object. from colorteller.utils import benchmark m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark ]) Parameters: Name Type Description Default color_palette list A list of hex strings. required colorteller Union[Col,Teller] an ColorTeller object required LabColor property readonly \u00a4 a list of LabColor objects hex property readonly \u00a4 a list of hex strings rgb property readonly \u00a4 a list of rgb tuples sRGBColor property readonly \u00a4 a list of sRGBColor objects metrics ( self , methods = None ) \u00a4 Calculates a list of metrics using the methods provided. Parameters: Name Type Description Default methods Optional[list] A list of methods to use to calculate the metrics. None Returns: Type Description list A list of metrics. Source code in colorteller/teller.py def metrics ( self , methods : Optional [ list ] = None ): \"\"\"Calculates a list of metrics using the methods provided. :param methods: A list of methods to use to calculate the metrics. :type methods: list :return: A list of metrics. :rtype: list \"\"\" if methods is None : methods = [] metrics = [] for m in methods : m_b = m ( self ) metrics . append ( m_b . metric ()) return metrics","title":"teller"},{"location":"references/teller/#teller","text":"","title":"Teller"},{"location":"references/teller/#colorteller.teller.ColorTeller","text":"A middleware for colorteller web service and benchmarking colors. It takes the color representations on the colorteller web service and converts them to an easy-to-use object. There are two different methods to instantiate a ColorTeller object: Provide a list of hex strings. Provide a dictionary or json string from the colorteller web service. Here are some examples: Using a list of hex strings: from colorteller import teller hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) Using a json string: from colorteller import teller ct_raw = '{\"author\":\"KausalFlow\",\"colors\":[{\"hex\":\"#8de4d3\",\"name\":\"\"},{\"hex\":\"#344b46\"},{\"hex\":\"#74ee65\"},{\"hex\":\"#238910\"},{\"hex\":\"#a6c363\"},{\"hex\":\"#509d99\"}],\"date\":1637142696,\"expirydate\":-62135596800,\"file\":\"bobcat-yellow\",\"hex\":[\"8de4d3\",\"344b46\",\"74ee65\",\"238910\",\"a6c363\",\"509d99\"],\"images\":null,\"objectID\":\"e0e129c8ed58316127909db84c67efcb\",\"permalink\":\"//localhost:1234/colors/bobcat-yellow/\",\"publishdate\":\"2021-11-17T10:51:36+01:00\",\"summary\":\"This is an experiment\",\"tags\":null,\"title\":\"Bobcat Yellow\"}' hex_results = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( ct_raw ) Note While we can use this to get some properties of the palette, this is mostly for downstream tasks. Parameters: Name Type Description Default colorteller_raw Union[dict, str] A dict (or json string of dict) of the raw response from colorteller web service, defaults to [DefaultParamVal] required hex_strings list A list of hex strings for the color palette. required","title":"ColorTeller"},{"location":"references/teller/#colorteller.teller.ColorTeller.hex","text":"a list of hex strings of the palette","title":"hex"},{"location":"references/teller/#colorteller.teller.ColorTeller.rgb","text":"a list of rgb tuples of the palette","title":"rgb"},{"location":"references/teller/#colorteller.teller.ColorTeller.from_hex","text":"set hex_strings property using a list of hex_strings. There is no return value. The hex_strings property is set using the input. Parameters: Name Type Description Default hex_strings list A list of hex strings for the color palette. required Source code in colorteller/teller.py def from_hex ( self , hex_strings : list ) -> None : \"\"\"set `hex_strings` property using a list of hex_strings. There is no return value. The `hex_strings` property is set using the input. :param hex_strings: A list of hex strings for the color palette. \"\"\" self . hex_strings = hex_strings","title":"from_hex()"},{"location":"references/teller/#colorteller.teller.ColorTeller.get_hex_strings","text":"Extract hex_strings from colorteller web service json or dict representation of the color palette. Parameters: Name Type Description Default colorteller_raw Union[dict, str] A dict (or json string of dict) of the raw response from colorteller web service. required Returns: Type Description list A list of hex strings for the color palette. Source code in colorteller/teller.py def get_hex_strings ( self , colorteller_raw : Union [ dict , str , None ]) -> list : \"\"\"Extract hex_strings from colorteller web service json or dict representation of the color palette. :param colorteller_raw: A dict (or json string of dict) of the raw response from colorteller web service. :return: A list of hex strings for the color palette. :rtype: list \"\"\" if colorteller_raw is None : return [] colorteller_raw = colorteller_raw colors_raw = colorteller_raw . get ( \"colors\" , []) self . hex_strings = [ color . get ( \"hex\" ) for color in colors_raw ] return self . hex_strings","title":"get_hex_strings()"},{"location":"references/teller/#colorteller.teller.ColorTeller.str_to_json","text":"convert the json string to dictionary Parameters: Name Type Description Default data_raw A json string of the raw response from colorteller web service. required Returns: Type Description dict dictionary of the raw response from colorteller web service. Source code in colorteller/teller.py @staticmethod def str_to_json ( data_raw ): \"\"\"convert the json string to dictionary :param data_raw: A json string of the raw response from colorteller web service. :return: dictionary of the raw response from colorteller web service. :rtype: dict \"\"\" return json . loads ( data_raw )","title":"str_to_json()"},{"location":"references/teller/#colorteller.teller.Colors","text":"A color palette container with benchmark results. To instantiate a Colors object, provide a list of hex strings ( color_palette ) or a ColorTeller object ( colorteller ). Warning If colorteller is provided, the color_palette argument will be ignored. from colorteller import teller hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) We could get the metrics from the Colors object. from colorteller.utils import benchmark m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark ]) Parameters: Name Type Description Default color_palette list A list of hex strings. required colorteller Union[Col,Teller] an ColorTeller object required","title":"Colors"},{"location":"references/teller/#colorteller.teller.Colors.LabColor","text":"a list of LabColor objects","title":"LabColor"},{"location":"references/teller/#colorteller.teller.Colors.hex","text":"a list of hex strings","title":"hex"},{"location":"references/teller/#colorteller.teller.Colors.rgb","text":"a list of rgb tuples","title":"rgb"},{"location":"references/teller/#colorteller.teller.Colors.sRGBColor","text":"a list of sRGBColor objects","title":"sRGBColor"},{"location":"references/teller/#colorteller.teller.Colors.metrics","text":"Calculates a list of metrics using the methods provided. Parameters: Name Type Description Default methods Optional[list] A list of methods to use to calculate the metrics. None Returns: Type Description list A list of metrics. Source code in colorteller/teller.py def metrics ( self , methods : Optional [ list ] = None ): \"\"\"Calculates a list of metrics using the methods provided. :param methods: A list of methods to use to calculate the metrics. :type methods: list :return: A list of metrics. :rtype: list \"\"\" if methods is None : methods = [] metrics = [] for m in methods : m_b = m ( self ) metrics . append ( m_b . metric ()) return metrics","title":"metrics()"},{"location":"references/visualize/","text":"Visualize \u00a4 BenchmarkCharts ( Charts ) \u00a4 Create charts of benchmarks. from colorteller import teller from colorteller.utils import benchmark from colorteller.visualize import BenchmarkCharts , ApplicationCharts hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark , benchmark . LightnessBenchmark ] ) charts = BenchmarkCharts ( metrics = m , save_folder = \".\" ) charts . distance_matrix ( show = False ) charts . noticable_matrix ( show = False ) Parameters: Name Type Description Default metrics list a list of benchmark metrics. It is created by teller.Colors object. Use teller.Colors.metrics(methods=[colorteller.utils.PerceptualDistanceBenchmark, colorteller.utils.LightnessBenchmark]) required save_folder Union[str, Path] the folder to save the charts to. required Charts \u00a4 A base class for charts. This class is not meant to be used directly. Parameters: Name Type Description Default save_folder which folder to save the charts to. required _save_fig ( self , save_to , name ) private \u00a4 Save fig to file. Only call this method after establishing a matplotlib axis object (ax) Parameters: Name Type Description Default save_to the path to save the figure as. If this is set to True , the figure will be saved to self.save_folder / name . If this is set to a specific path, the figure will be saved to that path. required Source code in colorteller/visualize.py def _save_fig ( self , save_to , name ): \"\"\"Save fig to file. Only call this method after establishing a matplotlib axis object (ax) :param save_to: the path to save the figure as. If this is set to `True`, the figure will be saved to `self.save_folder / name`. If this is set to a specific path, the figure will be saved to that path. \"\"\" if save_to is None : pass elif save_to is True : if self . save_folder is None : logger . error ( \"No save folder specified for Charts\" ) else : plt . savefig ( self . save_folder / name ) else : plt . savefig ( save_to ) plt . clf ()","title":"visualize"},{"location":"references/visualize/#visualize","text":"","title":"Visualize"},{"location":"references/visualize/#colorteller.visualize.BenchmarkCharts","text":"Create charts of benchmarks. from colorteller import teller from colorteller.utils import benchmark from colorteller.visualize import BenchmarkCharts , ApplicationCharts hex_strings = [ \"#8de4d3\" , \"#344b46\" , \"#74ee65\" , \"#238910\" , \"#a6c363\" , \"#509d99\" ] ct = teller . ColorTeller ( hex_strings = hex_strings ) c = teller . Colors ( colorteller = ct ) m = c . metrics ( methods = [ benchmark . PerceptualDistanceBenchmark , benchmark . LightnessBenchmark ] ) charts = BenchmarkCharts ( metrics = m , save_folder = \".\" ) charts . distance_matrix ( show = False ) charts . noticable_matrix ( show = False ) Parameters: Name Type Description Default metrics list a list of benchmark metrics. It is created by teller.Colors object. Use teller.Colors.metrics(methods=[colorteller.utils.PerceptualDistanceBenchmark, colorteller.utils.LightnessBenchmark]) required save_folder Union[str, Path] the folder to save the charts to. required","title":"BenchmarkCharts"},{"location":"references/visualize/#colorteller.visualize.Charts","text":"A base class for charts. This class is not meant to be used directly. Parameters: Name Type Description Default save_folder which folder to save the charts to. required","title":"Charts"},{"location":"references/visualize/#colorteller.visualize.Charts._save_fig","text":"Save fig to file. Only call this method after establishing a matplotlib axis object (ax) Parameters: Name Type Description Default save_to the path to save the figure as. If this is set to True , the figure will be saved to self.save_folder / name . If this is set to a specific path, the figure will be saved to that path. required Source code in colorteller/visualize.py def _save_fig ( self , save_to , name ): \"\"\"Save fig to file. Only call this method after establishing a matplotlib axis object (ax) :param save_to: the path to save the figure as. If this is set to `True`, the figure will be saved to `self.save_folder / name`. If this is set to a specific path, the figure will be saved to that path. \"\"\" if save_to is None : pass elif save_to is True : if self . save_folder is None : logger . error ( \"No save folder specified for Charts\" ) else : plt . savefig ( self . save_folder / name ) else : plt . savefig ( save_to ) plt . clf ()","title":"_save_fig()"},{"location":"references/data/","text":"Data \u00a4 colorteller.data module provides utilities for data related tasks.","title":"Introduction"},{"location":"references/data/#data","text":"colorteller.data module provides utilities for data related tasks.","title":"Data"},{"location":"references/data/dataset/","text":"Data - Dataset \u00a4","title":"data.dataset"},{"location":"references/data/dataset/#data-dataset","text":"","title":"Data - Dataset"},{"location":"references/utils/","text":"Utils \u00a4 colorteller.utils module contains some generic utilities.","title":"Introduction"},{"location":"references/utils/#utils","text":"colorteller.utils module contains some generic utilities.","title":"Utils"},{"location":"references/utils/benchmark/","text":"Utils - Benchmark \u00a4 ColorsBenchmark \u00a4 A base class to create charts to benchmark the color palettes. Parameters: Name Type Description Default colors teller.Colors objects which has properties such as hex. required LightnessBenchmark ( ColorsBenchmark ) \u00a4 Benchmark color palette based on lightness. Lightness If a color is too light, it would be very hard to read on white background. If a color is too dark, it would be hard to read on black background. Parameters: Name Type Description Default colors teller.Colors object which has properties such as hex. required _bounded_by_min_max ( self , color , min_lightness = 25 , max_lightness = 85 ) private \u00a4 Wheter the color lightness is bounded by min and max. Parameters: Name Type Description Default color a color in Lab color space with a lab_l property required min_lightness the min lightness value, defaults to 25 25 max_lightness the max lightness value, defaults to 85 85 Source code in colorteller/utils/benchmark.py def _bounded_by_min_max ( self , color , min_lightness = 25 , max_lightness = 85 ): \"\"\"Wheter the color lightness is bounded by min and max. :param color: a color in Lab color space with a `lab_l` property :param min_lightness: the min lightness value, defaults to 25 :param max_lightness: the max lightness value, defaults to 85 \"\"\" return self . _greater_than_min ( color , min_lightness ) and self . _smaller_than_max ( color , max_lightness ) _greater_than_min ( self , color , min_lightness = 25 ) private \u00a4 Whether the lightness of the color is lighter than the min value set here. Parameters: Name Type Description Default color a color in Lab color space with a lab_l property required min_lightness int the min lightness value, defaults to 25 25 Source code in colorteller/utils/benchmark.py def _greater_than_min ( self , color , min_lightness : int = 25 ): \"\"\"Whether the lightness of the color is lighter than the min value set here. :param color: a color in Lab color space with a `lab_l` property :param min_lightness: the min lightness value, defaults to 25 \"\"\" return color . lab_l >= min_lightness _lightness_benchmark ( self , colors , min_lightness = 25 , max_lightness = 85 ) private \u00a4 _lightness_benchmark calculates all the benchmarks based on lightness. Parameters: Name Type Description Default colors list a list of colors in Lab color space required min_lightness int, optional the min lightness value, defaults to 25 25 max_lightness int, optional the max lightness value, defaults to 85 85 Returns: Type Description dict the benchmark results Source code in colorteller/utils/benchmark.py def _lightness_benchmark ( self , colors , min_lightness = 25 , max_lightness = 85 ): \"\"\"_lightness_benchmark calculates all the benchmarks based on lightness. :param colors: a list of colors in Lab color space :type colors: list :param min_lightness: the min lightness value, defaults to 25 :type min_lightness: int, optional :param max_lightness: the max lightness value, defaults to 85 :type max_lightness: int, optional :return: the benchmark results :rtype: dict \"\"\" return { \"lightness\" : [ c . lab_l for c in colors ], \"min_lightness\" : min_lightness , \"max_lightness\" : max_lightness , \"smaller_than_max\" : [ self . _smaller_than_max ( c , max_lightness ) for c in colors ], \"greater_than_min\" : [ self . _greater_than_min ( c , min_lightness ) for c in colors ], \"bounded_by_min_max\" : [ self . _bounded_by_min_max ( c , min_lightness , max_lightness ) for c in colors ], } _smaller_than_max ( self , color , max_lightness = 85 ) private \u00a4 Whether the lightness of the color is larger than the max value set here Parameters: Name Type Description Default color a color in Lab color space with a lab_l property required max_lightness int the max lightness value, defaults to 85 85 Source code in colorteller/utils/benchmark.py def _smaller_than_max ( self , color , max_lightness : int = 85 ): \"\"\"Whether the lightness of the color is larger than the max value set here :param color: a color in Lab color space with a `lab_l` property :param max_lightness: the max lightness value, defaults to 85 \"\"\" return color . lab_l <= max_lightness metric ( self ) \u00a4 calculate the metrics of the current benchmark Source code in colorteller/utils/benchmark.py def metric ( self ): \"\"\"calculate the metrics of the current benchmark\"\"\" return { \"method\" : \"lightness\" , \"data\" : self . _lightness_benchmark ( self . LabColor , min_lightness = 25 , max_lightness = 85 ), } PerceptualDistanceBenchmark ( ColorsBenchmark ) \u00a4 Create benchmark based on perceptual distances. Used in teller.Colors.metrics While this class can be used independently, it is mostly designed for the methods argument of teller.Colors.metrics , e.g., methods=[PerceptualDistanceBenchmark] . Parameters: Name Type Description Default colors teller.Colors object which has properties such as hex. required _delta_e_noticable_distance ( self , distance , threshold = 5 ) private \u00a4 Decide whether the two colors are noticable based on deltaE distance. If the distance is larger than threshold, the two colors are noticable. References The choice of the threshold is based on the following paper: Mokrzycki WS, Tatol M. Color difference Delta E - A survey. Machine Graphics and Vision. 2011;20: 383\u2013411. Available: https://www.semanticscholar.org/paper/Color-difference-Delta-E-A-survey/67d9178f7bad9686c002b721138e26124f6e2e35 Parameters: Name Type Description Default distance float the deltaE distance required threshold Union[int, float] the threshold to decide whether the two colors are noticable, defaults to 5 5 Returns: Type Description bool whether the two colors are noticable Source code in colorteller/utils/benchmark.py def _delta_e_noticable_distance ( self , distance : float , threshold : Union [ int , float ] = 5 ): \"\"\"Decide whether the two colors are noticable based on deltaE distance. If the distance is larger than threshold, the two colors are noticable. !!! note \"References\" The choice of the threshold is based on the following paper: Mokrzycki WS, Tatol M. Color difference Delta E - A survey. Machine Graphics and Vision. 2011;20: 383\u2013411. Available: https://www.semanticscholar.org/paper/Color-difference-Delta-E-A-survey/67d9178f7bad9686c002b721138e26124f6e2e35 :param distance: the deltaE distance :type distance: float :param threshold: the threshold to decide whether the two colors are noticable, defaults to 5 :type threshold: int, optional :return: whether the two colors are noticable :rtype: bool \"\"\" if distance > threshold : return True else : return False _perceptual_distance ( self , colors , matrix = True ) private \u00a4 _perceptual_distance takes a Colors object and returns a dict with the perceptual distance between each color in it. Parameters: Name Type Description Default colors Colors a Colors object required matrix bool, optional whether to create a distance matrix, defaults to True True Returns: Type Description dict a dictionary of the benchmark result Source code in colorteller/utils/benchmark.py def _perceptual_distance ( self , colors : Colors , matrix = True ): \"\"\"_perceptual_distance takes a Colors object and returns a dict with the perceptual distance between each color in it. :param colors: a Colors object :param matrix: whether to create a distance matrix, defaults to True :type matrix: bool, optional :return: a dictionary of the benchmark result :rtype: dict \"\"\" if matrix is False : return self . _perceptual_distance_list ( colors ) else : return self . _perceptual_distance_matrix ( colors ) _perceptual_distance_list ( self , colors , sort = False ) private \u00a4 Calculates a list of perceptual distance Parameters: Name Type Description Default colors a Colors object required Returns: Type Description dict a dictionary of the benchmark result Source code in colorteller/utils/benchmark.py def _perceptual_distance_list ( self , colors , sort = False ): \"\"\"Calculates a list of perceptual distance :param colors: a Colors object :return: a dictionary of the benchmark result :rtype: dict \"\"\" logger . debug ( f \"Calculating perceptual distance for { len ( colors ) } colors: { colors } .\" ) if sort is True : logger . debug ( \"Sorting colors by perceptual distance.\" ) sorted_lab_colors_ = self . _sort_on_distance ( colors , delta_e_cie2000 ) logger . debug ( f \"Sorted colors by perceptual distance: { sorted_lab_colors_ } \" ) sorted_lab_colors = sorted_lab_colors_ [ \"colors\" ] logger . debug ( f \"Sorted colors by perceptual distance: { sorted_lab_colors } \" ) sorted_hex = [ self . hex [ i ] for i in sorted_lab_colors_ [ \"indices\" ]] logger . debug ( f \"Sorted colors by perceptual distance: { sorted_hex } \" ) distances = [ delta_e_cie2000 ( c1 , c2 ) for c1 , c2 in zip ( sorted_lab_colors [: - 1 ], sorted_lab_colors [ 1 :]) ] res = { \"hex\" : sorted_hex , \"lab\" : [ c . get_value_tuple () for c in sorted_lab_colors ], \"distances\" : distances , } else : distances = [ delta_e_cie2000 ( c1 , c2 ) for c1 , c2 in zip ( colors [: - 1 ], colors [ 1 :]) ] res = { \"hex\" : self . hex , \"lab\" : [ c . get_value_tuple () for c in colors ], \"distances\" : distances , } res [ \"noticable\" ] = [ self . _delta_e_noticable_distance ( d ) for d in res [ \"distances\" ] ] return res _perceptual_distance_matrix ( self , colors ) private \u00a4 Calculates the perceptual distance matrix Parameters: Name Type Description Default colors a Colors object required Returns: Type Description dict a dictionary of the benchmark result Source code in colorteller/utils/benchmark.py def _perceptual_distance_matrix ( self , colors ): \"\"\"Calculates the perceptual distance matrix :param colors: a Colors object :return: a dictionary of the benchmark result :rtype: dict \"\"\" pd = [] for ci in colors : ci_pd = [] for cj in colors : ci_pd . append ( delta_e_cie2000 ( ci , cj )) pd . append ( ci_pd ) pd_noticable = [] for pd_row in pd : pd_noticable_row = [] for d in pd_row : pd_noticable_row . append ( self . _delta_e_noticable_distance ( d )) pd_noticable . append ( pd_noticable_row ) return { \"colors\" : self . hex , \"lab\" : [ c . get_value_tuple () for c in colors ], \"distances\" : pd , \"noticable\" : pd_noticable , } _sort_on_distance ( lab_colors , distance_metric , reference_color = None ) private staticmethod \u00a4 sort the colors based on distance between each other. Parameters: Name Type Description Default lab_colors list a list of colors in lab color space required distance_metric the distance metric to use, it should be a function that takes two colors as arguments and returns the distance. required reference_color the reference color to use, defaults to None None Source code in colorteller/utils/benchmark.py @staticmethod def _sort_on_distance ( lab_colors : list , distance_metric , reference_color = None ): \"\"\"sort the colors based on distance between each other. :param lab_colors: a list of colors in lab color space :type lab_colors: list :param distance_metric: the distance metric to use, it should be a function that takes two colors as arguments and returns the distance. :param reference_color: the reference color to use, defaults to None \"\"\" if reference_color is None : reference_color_rgb = sRGBColor ( rgb_r = 255 , rgb_g = 255 , rgb_b = 255 ) reference_color = convert_color ( reference_color_rgb , LabColor ) elif isinstance ( reference_color , str ): if reference_color == \"white\" : reference_color = convert_color ( sRGBColor ( rgb_r = 255 , rgb_g = 255 , rgb_b = 255 ), LabColor ) elif reference_color == \"black\" : reference_color = convert_color ( sRGBColor ( rgb_r = 0 , rgb_g = 0 , rgb_b = 0 ), LabColor ) ref_distances = [ distance_metric ( c , reference_color ) for c in lab_colors ] sorted_index = sorted ( range ( len ( ref_distances )), key = ref_distances . __getitem__ ) return { \"colors\" : [ lab_colors [ i ] for i in sorted_index ], \"indices\" : sorted_index , } metric ( self ) \u00a4 calculate the metrics of the current benchmark Source code in colorteller/utils/benchmark.py def metric ( self ): \"\"\"calculate the metrics of the current benchmark\"\"\" return { \"method\" : \"perceptual_distance\" , \"data\" : self . _perceptual_distance ( self . LabColor ), }","title":"utils.benchmark"},{"location":"references/utils/benchmark/#utils-benchmark","text":"","title":"Utils - Benchmark"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.ColorsBenchmark","text":"A base class to create charts to benchmark the color palettes. Parameters: Name Type Description Default colors teller.Colors objects which has properties such as hex. required","title":"ColorsBenchmark"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.LightnessBenchmark","text":"Benchmark color palette based on lightness. Lightness If a color is too light, it would be very hard to read on white background. If a color is too dark, it would be hard to read on black background. Parameters: Name Type Description Default colors teller.Colors object which has properties such as hex. required","title":"LightnessBenchmark"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.LightnessBenchmark._bounded_by_min_max","text":"Wheter the color lightness is bounded by min and max. Parameters: Name Type Description Default color a color in Lab color space with a lab_l property required min_lightness the min lightness value, defaults to 25 25 max_lightness the max lightness value, defaults to 85 85 Source code in colorteller/utils/benchmark.py def _bounded_by_min_max ( self , color , min_lightness = 25 , max_lightness = 85 ): \"\"\"Wheter the color lightness is bounded by min and max. :param color: a color in Lab color space with a `lab_l` property :param min_lightness: the min lightness value, defaults to 25 :param max_lightness: the max lightness value, defaults to 85 \"\"\" return self . _greater_than_min ( color , min_lightness ) and self . _smaller_than_max ( color , max_lightness )","title":"_bounded_by_min_max()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.LightnessBenchmark._greater_than_min","text":"Whether the lightness of the color is lighter than the min value set here. Parameters: Name Type Description Default color a color in Lab color space with a lab_l property required min_lightness int the min lightness value, defaults to 25 25 Source code in colorteller/utils/benchmark.py def _greater_than_min ( self , color , min_lightness : int = 25 ): \"\"\"Whether the lightness of the color is lighter than the min value set here. :param color: a color in Lab color space with a `lab_l` property :param min_lightness: the min lightness value, defaults to 25 \"\"\" return color . lab_l >= min_lightness","title":"_greater_than_min()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.LightnessBenchmark._lightness_benchmark","text":"_lightness_benchmark calculates all the benchmarks based on lightness. Parameters: Name Type Description Default colors list a list of colors in Lab color space required min_lightness int, optional the min lightness value, defaults to 25 25 max_lightness int, optional the max lightness value, defaults to 85 85 Returns: Type Description dict the benchmark results Source code in colorteller/utils/benchmark.py def _lightness_benchmark ( self , colors , min_lightness = 25 , max_lightness = 85 ): \"\"\"_lightness_benchmark calculates all the benchmarks based on lightness. :param colors: a list of colors in Lab color space :type colors: list :param min_lightness: the min lightness value, defaults to 25 :type min_lightness: int, optional :param max_lightness: the max lightness value, defaults to 85 :type max_lightness: int, optional :return: the benchmark results :rtype: dict \"\"\" return { \"lightness\" : [ c . lab_l for c in colors ], \"min_lightness\" : min_lightness , \"max_lightness\" : max_lightness , \"smaller_than_max\" : [ self . _smaller_than_max ( c , max_lightness ) for c in colors ], \"greater_than_min\" : [ self . _greater_than_min ( c , min_lightness ) for c in colors ], \"bounded_by_min_max\" : [ self . _bounded_by_min_max ( c , min_lightness , max_lightness ) for c in colors ], }","title":"_lightness_benchmark()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.LightnessBenchmark._smaller_than_max","text":"Whether the lightness of the color is larger than the max value set here Parameters: Name Type Description Default color a color in Lab color space with a lab_l property required max_lightness int the max lightness value, defaults to 85 85 Source code in colorteller/utils/benchmark.py def _smaller_than_max ( self , color , max_lightness : int = 85 ): \"\"\"Whether the lightness of the color is larger than the max value set here :param color: a color in Lab color space with a `lab_l` property :param max_lightness: the max lightness value, defaults to 85 \"\"\" return color . lab_l <= max_lightness","title":"_smaller_than_max()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.LightnessBenchmark.metric","text":"calculate the metrics of the current benchmark Source code in colorteller/utils/benchmark.py def metric ( self ): \"\"\"calculate the metrics of the current benchmark\"\"\" return { \"method\" : \"lightness\" , \"data\" : self . _lightness_benchmark ( self . LabColor , min_lightness = 25 , max_lightness = 85 ), }","title":"metric()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark","text":"Create benchmark based on perceptual distances. Used in teller.Colors.metrics While this class can be used independently, it is mostly designed for the methods argument of teller.Colors.metrics , e.g., methods=[PerceptualDistanceBenchmark] . Parameters: Name Type Description Default colors teller.Colors object which has properties such as hex. required","title":"PerceptualDistanceBenchmark"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark._delta_e_noticable_distance","text":"Decide whether the two colors are noticable based on deltaE distance. If the distance is larger than threshold, the two colors are noticable. References The choice of the threshold is based on the following paper: Mokrzycki WS, Tatol M. Color difference Delta E - A survey. Machine Graphics and Vision. 2011;20: 383\u2013411. Available: https://www.semanticscholar.org/paper/Color-difference-Delta-E-A-survey/67d9178f7bad9686c002b721138e26124f6e2e35 Parameters: Name Type Description Default distance float the deltaE distance required threshold Union[int, float] the threshold to decide whether the two colors are noticable, defaults to 5 5 Returns: Type Description bool whether the two colors are noticable Source code in colorteller/utils/benchmark.py def _delta_e_noticable_distance ( self , distance : float , threshold : Union [ int , float ] = 5 ): \"\"\"Decide whether the two colors are noticable based on deltaE distance. If the distance is larger than threshold, the two colors are noticable. !!! note \"References\" The choice of the threshold is based on the following paper: Mokrzycki WS, Tatol M. Color difference Delta E - A survey. Machine Graphics and Vision. 2011;20: 383\u2013411. Available: https://www.semanticscholar.org/paper/Color-difference-Delta-E-A-survey/67d9178f7bad9686c002b721138e26124f6e2e35 :param distance: the deltaE distance :type distance: float :param threshold: the threshold to decide whether the two colors are noticable, defaults to 5 :type threshold: int, optional :return: whether the two colors are noticable :rtype: bool \"\"\" if distance > threshold : return True else : return False","title":"_delta_e_noticable_distance()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark._perceptual_distance","text":"_perceptual_distance takes a Colors object and returns a dict with the perceptual distance between each color in it. Parameters: Name Type Description Default colors Colors a Colors object required matrix bool, optional whether to create a distance matrix, defaults to True True Returns: Type Description dict a dictionary of the benchmark result Source code in colorteller/utils/benchmark.py def _perceptual_distance ( self , colors : Colors , matrix = True ): \"\"\"_perceptual_distance takes a Colors object and returns a dict with the perceptual distance between each color in it. :param colors: a Colors object :param matrix: whether to create a distance matrix, defaults to True :type matrix: bool, optional :return: a dictionary of the benchmark result :rtype: dict \"\"\" if matrix is False : return self . _perceptual_distance_list ( colors ) else : return self . _perceptual_distance_matrix ( colors )","title":"_perceptual_distance()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark._perceptual_distance_list","text":"Calculates a list of perceptual distance Parameters: Name Type Description Default colors a Colors object required Returns: Type Description dict a dictionary of the benchmark result Source code in colorteller/utils/benchmark.py def _perceptual_distance_list ( self , colors , sort = False ): \"\"\"Calculates a list of perceptual distance :param colors: a Colors object :return: a dictionary of the benchmark result :rtype: dict \"\"\" logger . debug ( f \"Calculating perceptual distance for { len ( colors ) } colors: { colors } .\" ) if sort is True : logger . debug ( \"Sorting colors by perceptual distance.\" ) sorted_lab_colors_ = self . _sort_on_distance ( colors , delta_e_cie2000 ) logger . debug ( f \"Sorted colors by perceptual distance: { sorted_lab_colors_ } \" ) sorted_lab_colors = sorted_lab_colors_ [ \"colors\" ] logger . debug ( f \"Sorted colors by perceptual distance: { sorted_lab_colors } \" ) sorted_hex = [ self . hex [ i ] for i in sorted_lab_colors_ [ \"indices\" ]] logger . debug ( f \"Sorted colors by perceptual distance: { sorted_hex } \" ) distances = [ delta_e_cie2000 ( c1 , c2 ) for c1 , c2 in zip ( sorted_lab_colors [: - 1 ], sorted_lab_colors [ 1 :]) ] res = { \"hex\" : sorted_hex , \"lab\" : [ c . get_value_tuple () for c in sorted_lab_colors ], \"distances\" : distances , } else : distances = [ delta_e_cie2000 ( c1 , c2 ) for c1 , c2 in zip ( colors [: - 1 ], colors [ 1 :]) ] res = { \"hex\" : self . hex , \"lab\" : [ c . get_value_tuple () for c in colors ], \"distances\" : distances , } res [ \"noticable\" ] = [ self . _delta_e_noticable_distance ( d ) for d in res [ \"distances\" ] ] return res","title":"_perceptual_distance_list()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark._perceptual_distance_matrix","text":"Calculates the perceptual distance matrix Parameters: Name Type Description Default colors a Colors object required Returns: Type Description dict a dictionary of the benchmark result Source code in colorteller/utils/benchmark.py def _perceptual_distance_matrix ( self , colors ): \"\"\"Calculates the perceptual distance matrix :param colors: a Colors object :return: a dictionary of the benchmark result :rtype: dict \"\"\" pd = [] for ci in colors : ci_pd = [] for cj in colors : ci_pd . append ( delta_e_cie2000 ( ci , cj )) pd . append ( ci_pd ) pd_noticable = [] for pd_row in pd : pd_noticable_row = [] for d in pd_row : pd_noticable_row . append ( self . _delta_e_noticable_distance ( d )) pd_noticable . append ( pd_noticable_row ) return { \"colors\" : self . hex , \"lab\" : [ c . get_value_tuple () for c in colors ], \"distances\" : pd , \"noticable\" : pd_noticable , }","title":"_perceptual_distance_matrix()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark._sort_on_distance","text":"sort the colors based on distance between each other. Parameters: Name Type Description Default lab_colors list a list of colors in lab color space required distance_metric the distance metric to use, it should be a function that takes two colors as arguments and returns the distance. required reference_color the reference color to use, defaults to None None Source code in colorteller/utils/benchmark.py @staticmethod def _sort_on_distance ( lab_colors : list , distance_metric , reference_color = None ): \"\"\"sort the colors based on distance between each other. :param lab_colors: a list of colors in lab color space :type lab_colors: list :param distance_metric: the distance metric to use, it should be a function that takes two colors as arguments and returns the distance. :param reference_color: the reference color to use, defaults to None \"\"\" if reference_color is None : reference_color_rgb = sRGBColor ( rgb_r = 255 , rgb_g = 255 , rgb_b = 255 ) reference_color = convert_color ( reference_color_rgb , LabColor ) elif isinstance ( reference_color , str ): if reference_color == \"white\" : reference_color = convert_color ( sRGBColor ( rgb_r = 255 , rgb_g = 255 , rgb_b = 255 ), LabColor ) elif reference_color == \"black\" : reference_color = convert_color ( sRGBColor ( rgb_r = 0 , rgb_g = 0 , rgb_b = 0 ), LabColor ) ref_distances = [ distance_metric ( c , reference_color ) for c in lab_colors ] sorted_index = sorted ( range ( len ( ref_distances )), key = ref_distances . __getitem__ ) return { \"colors\" : [ lab_colors [ i ] for i in sorted_index ], \"indices\" : sorted_index , }","title":"_sort_on_distance()"},{"location":"references/utils/benchmark/#colorteller.utils.benchmark.PerceptualDistanceBenchmark.metric","text":"calculate the metrics of the current benchmark Source code in colorteller/utils/benchmark.py def metric ( self ): \"\"\"calculate the metrics of the current benchmark\"\"\" return { \"method\" : \"perceptual_distance\" , \"data\" : self . _perceptual_distance ( self . LabColor ), }","title":"metric()"},{"location":"references/utils/chart/","text":"Utils - Chart \u00a4 distance_matrix ( dist_mat , colors , ax = None , threshold = 10 ) \u00a4 Visualize distance matrix from a matrix of distance Source code in colorteller/utils/chart.py def distance_matrix ( dist_mat , colors , ax = None , threshold = 10 ): \"\"\"Visualize distance matrix from a matrix of distance\"\"\" dist_mat_annot = [] for dist_row in dist_mat : dist_row_annot = [] for dist in dist_row : if dist <= threshold : dist_row_annot . append ( f \" { dist : .1f } \" ) else : dist_row_annot . append ( f \"> { threshold : .1f } \" ) dist_mat_annot . append ( dist_row_annot ) chart_kws = dict ( vmin = 0 , vmax = threshold , annot = dist_mat_annot , fmt = \"\" , xticklabels = colors , yticklabels = colors , square = True , linewidths = 0.5 , ) if ax is None : ax = sns . heatmap ( dist_mat , ** chart_kws ) else : sns . heatmap ( dist_mat , ax = ax , ** chart_kws ) cbar = ax . collections [ 0 ] . colorbar cbar . set_ticks ([ 0 , threshold ]) cbar . set_ticklabels ([ \"0\" , f \"> { threshold : .1f } \" ], va = \"center\" ) ax . set_xticklabels ( ax . get_xticklabels (), rotation = 45 ) ax . set_yticklabels ( ax . get_yticklabels (), rotation = 45 ) plt . tight_layout () return ax noticable_matrix ( noti_mat , colors , ax = None ) \u00a4 Visualize noticable matrix Source code in colorteller/utils/chart.py def noticable_matrix ( noti_mat , colors , ax = None ): \"\"\"Visualize noticable matrix\"\"\" chart_kws = dict ( vmin = 0 , vmax = 1 , cbar = False , annot = noti_mat , fmt = \"\" , xticklabels = colors , yticklabels = colors , square = True , linewidths = 0.5 , ) if ax is None : ax = sns . heatmap ( noti_mat , ** chart_kws ) else : sns . heatmap ( noti_mat , ax = ax , ** chart_kws ) ax . set_xticklabels ( ax . get_xticklabels (), rotation = 45 ) ax . set_yticklabels ( ax . get_yticklabels (), rotation = 45 ) plt . tight_layout () return ax","title":"utils.chart"},{"location":"references/utils/chart/#utils-chart","text":"","title":"Utils - Chart"},{"location":"references/utils/chart/#colorteller.utils.chart.distance_matrix","text":"Visualize distance matrix from a matrix of distance Source code in colorteller/utils/chart.py def distance_matrix ( dist_mat , colors , ax = None , threshold = 10 ): \"\"\"Visualize distance matrix from a matrix of distance\"\"\" dist_mat_annot = [] for dist_row in dist_mat : dist_row_annot = [] for dist in dist_row : if dist <= threshold : dist_row_annot . append ( f \" { dist : .1f } \" ) else : dist_row_annot . append ( f \"> { threshold : .1f } \" ) dist_mat_annot . append ( dist_row_annot ) chart_kws = dict ( vmin = 0 , vmax = threshold , annot = dist_mat_annot , fmt = \"\" , xticklabels = colors , yticklabels = colors , square = True , linewidths = 0.5 , ) if ax is None : ax = sns . heatmap ( dist_mat , ** chart_kws ) else : sns . heatmap ( dist_mat , ax = ax , ** chart_kws ) cbar = ax . collections [ 0 ] . colorbar cbar . set_ticks ([ 0 , threshold ]) cbar . set_ticklabels ([ \"0\" , f \"> { threshold : .1f } \" ], va = \"center\" ) ax . set_xticklabels ( ax . get_xticklabels (), rotation = 45 ) ax . set_yticklabels ( ax . get_yticklabels (), rotation = 45 ) plt . tight_layout () return ax","title":"distance_matrix()"},{"location":"references/utils/chart/#colorteller.utils.chart.noticable_matrix","text":"Visualize noticable matrix Source code in colorteller/utils/chart.py def noticable_matrix ( noti_mat , colors , ax = None ): \"\"\"Visualize noticable matrix\"\"\" chart_kws = dict ( vmin = 0 , vmax = 1 , cbar = False , annot = noti_mat , fmt = \"\" , xticklabels = colors , yticklabels = colors , square = True , linewidths = 0.5 , ) if ax is None : ax = sns . heatmap ( noti_mat , ** chart_kws ) else : sns . heatmap ( noti_mat , ax = ax , ** chart_kws ) ax . set_xticklabels ( ax . get_xticklabels (), rotation = 45 ) ax . set_yticklabels ( ax . get_yticklabels (), rotation = 45 ) plt . tight_layout () return ax","title":"noticable_matrix()"},{"location":"references/utils/cmd/","text":"Utils - Command Line \u00a4 prepare_paths ( target ) \u00a4 Prepare the paths for the given target. Source code in colorteller/utils/cmd.py def prepare_paths ( target ): \"\"\" Prepare the paths for the given target. \"\"\" if not isinstance ( target , Path ): target = Path ( target ) if not target . exists (): target . mkdir ( parents = True , exist_ok = True ) metrics_to = target / \"metrics.json\" return { \"target\" : target , \"metrics_to\" : metrics_to }","title":"utils.cmd"},{"location":"references/utils/cmd/#utils-command-line","text":"","title":"Utils - Command Line"},{"location":"references/utils/cmd/#colorteller.utils.cmd.prepare_paths","text":"Prepare the paths for the given target. Source code in colorteller/utils/cmd.py def prepare_paths ( target ): \"\"\" Prepare the paths for the given target. \"\"\" if not isinstance ( target , Path ): target = Path ( target ) if not target . exists (): target . mkdir ( parents = True , exist_ok = True ) metrics_to = target / \"metrics.json\" return { \"target\" : target , \"metrics_to\" : metrics_to }","title":"prepare_paths()"},{"location":"references/utils/color/","text":"Utils - Color \u00a4 hue_difference ( color1 , color2 ) \u00a4 Calculates the difference between two colors in the HSL color space. References: - https://help.efi.com/fieryxf/KnowledgeBase/color/Delta%20E_H_T.pdf Source code in colorteller/utils/color.py def hue_difference ( color1 , color2 ): \"\"\" Calculates the difference between two colors in the HSL color space. References: - https://help.efi.com/fieryxf/KnowledgeBase/color/Delta%20E_H_T.pdf \"\"\" raise NotImplementedError ( f \"not yet implemented\" )","title":"utils.color"},{"location":"references/utils/color/#utils-color","text":"","title":"Utils - Color"},{"location":"references/utils/color/#colorteller.utils.color.hue_difference","text":"Calculates the difference between two colors in the HSL color space. References: - https://help.efi.com/fieryxf/KnowledgeBase/color/Delta%20E_H_T.pdf Source code in colorteller/utils/color.py def hue_difference ( color1 , color2 ): \"\"\" Calculates the difference between two colors in the HSL color space. References: - https://help.efi.com/fieryxf/KnowledgeBase/color/Delta%20E_H_T.pdf \"\"\" raise NotImplementedError ( f \"not yet implemented\" )","title":"hue_difference()"},{"location":"references/utils/hex/","text":"Utils - Hex \u00a4 Hex \u00a4 Holds the HEX colors References: - https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python - https://www.delftstack.com/howto/python/python-hex-to-rgb/","title":"utils.hex"},{"location":"references/utils/hex/#utils-hex","text":"","title":"Utils - Hex"},{"location":"references/utils/hex/#colorteller.utils.hex.Hex","text":"Holds the HEX colors References: - https://stackoverflow.com/questions/29643352/converting-hex-to-rgb-value-in-python - https://www.delftstack.com/howto/python/python-hex-to-rgb/","title":"Hex"},{"location":"references/utils/sort/","text":"Utils - Sort \u00a4 sort_on_distance_matrix ( lab_colors , distance_metric ) \u00a4 sort colors based on distance metric TODO: To be extended. Source code in colorteller/utils/sort.py def sort_on_distance_matrix ( lab_colors , distance_metric ): \"\"\"sort colors based on distance metric TODO: To be extended. \"\"\" s = len ( lab_colors ) dist = [[ distance_metric ( c1 , c2 ) for c1 in lab_colors ] for c2 in lab_colors ] # calculate the shortest path min_distances = [] min_distance_indices = [] for r in range ( s - 1 ): c = r + 1 r_dist = dist [ r ][ c :] r_min_d_index = min ( range ( len ( r_dist )), key = r_dist . __getitem__ ) min_distance = r_dist [ r_min_d_index ] min_index = ( r , c + r_min_d_index ) min_distances . append ( min_distance ) min_distance_indices . append ( min_index ) return min_distances , min_distance_indices sort_on_distance_to_reference ( lab_colors , distance_metric , reference_color ) \u00a4 sort colors based on distance metric Source code in colorteller/utils/sort.py def sort_on_distance_to_reference ( lab_colors , distance_metric , reference_color ): \"\"\"sort colors based on distance metric\"\"\" ref_distances = [ distance_metric ( c , reference_color ) for c in lab_colors ] sorted_index = sorted ( range ( len ( ref_distances )), key = ref_distances . __getitem__ ) return { \"colors\" : [ lab_colors [ i ] for i in sorted_index ], \"indices\" : sorted_index , }","title":"utils.sort"},{"location":"references/utils/sort/#utils-sort","text":"","title":"Utils - Sort"},{"location":"references/utils/sort/#colorteller.utils.sort.sort_on_distance_matrix","text":"sort colors based on distance metric TODO: To be extended. Source code in colorteller/utils/sort.py def sort_on_distance_matrix ( lab_colors , distance_metric ): \"\"\"sort colors based on distance metric TODO: To be extended. \"\"\" s = len ( lab_colors ) dist = [[ distance_metric ( c1 , c2 ) for c1 in lab_colors ] for c2 in lab_colors ] # calculate the shortest path min_distances = [] min_distance_indices = [] for r in range ( s - 1 ): c = r + 1 r_dist = dist [ r ][ c :] r_min_d_index = min ( range ( len ( r_dist )), key = r_dist . __getitem__ ) min_distance = r_dist [ r_min_d_index ] min_index = ( r , c + r_min_d_index ) min_distances . append ( min_distance ) min_distance_indices . append ( min_index ) return min_distances , min_distance_indices","title":"sort_on_distance_matrix()"},{"location":"references/utils/sort/#colorteller.utils.sort.sort_on_distance_to_reference","text":"sort colors based on distance metric Source code in colorteller/utils/sort.py def sort_on_distance_to_reference ( lab_colors , distance_metric , reference_color ): \"\"\"sort colors based on distance metric\"\"\" ref_distances = [ distance_metric ( c , reference_color ) for c in lab_colors ] sorted_index = sorted ( range ( len ( ref_distances )), key = ref_distances . __getitem__ ) return { \"colors\" : [ lab_colors [ i ] for i in sorted_index ], \"indices\" : sorted_index , }","title":"sort_on_distance_to_reference()"},{"location":"tutorials/","text":"","title":"Index"},{"location":"tutorials/references/","text":"References \u00a4 Gramazio CC, Laidlaw DH, Schloss KB. Colorgorical: Creating discriminable and preferable color palettes for information visualization. IEEE Trans Vis Comput Graph. 2017;23: 521\u2013530. doi:10.1109/TVCG.2016.2598918 Guan S-S, Luo MR. A colour-difference formula for assessing large colour differences. Color Res Appl. 1999;24: 344\u2013355. doi:10.1002/(sici)1520-6378(199910)24:5<344::aid-col6>3.0.co;2-x Moroney N, Tastl I, Gottwals M. A similarity measure for large color differences. [cited 23 Nov 2021]. Available: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.737.3854&rep=rep1&type=pdf Schloss KB. The Aesthetics of Color Combinations. Palmer SE, editor. Doctor of Philosophy in Psychology, University of California, Berkeley. 2011. MacAdam DL. Visual Sensitivities to Color Differences in Daylight*. J Opt Soc Am, JOSA. 1942;32: 247\u2013274. doi:10.1364/JOSA.32.000247 Farup I. A computational framework for colour metrics and colour space transforms. PeerJ Comput Sci. 2016;2: e48. doi:10.7717/peerj-cs.48 Fairchild MD, Chen P-H. Brightness, lightness, and specifying color in high-dynamic-range scenes and images. Image Quality and System Performance VIII. SPIE; 2011. pp. 233\u2013246. doi:10.1117/12.872075 Mokrzycki WS, Tatol M. Color difference Delta E - A survey. Machine Graphics and Vision. 2011;20: 383\u2013411. Available: https://www.semanticscholar.org/paper/Color-difference-Delta-E-A-survey/67d9178f7bad9686c002b721138e26124f6e2e35","title":"References"},{"location":"tutorials/references/#references","text":"Gramazio CC, Laidlaw DH, Schloss KB. Colorgorical: Creating discriminable and preferable color palettes for information visualization. IEEE Trans Vis Comput Graph. 2017;23: 521\u2013530. doi:10.1109/TVCG.2016.2598918 Guan S-S, Luo MR. A colour-difference formula for assessing large colour differences. Color Res Appl. 1999;24: 344\u2013355. doi:10.1002/(sici)1520-6378(199910)24:5<344::aid-col6>3.0.co;2-x Moroney N, Tastl I, Gottwals M. A similarity measure for large color differences. [cited 23 Nov 2021]. Available: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.737.3854&rep=rep1&type=pdf Schloss KB. The Aesthetics of Color Combinations. Palmer SE, editor. Doctor of Philosophy in Psychology, University of California, Berkeley. 2011. MacAdam DL. Visual Sensitivities to Color Differences in Daylight*. J Opt Soc Am, JOSA. 1942;32: 247\u2013274. doi:10.1364/JOSA.32.000247 Farup I. A computational framework for colour metrics and colour space transforms. PeerJ Comput Sci. 2016;2: e48. doi:10.7717/peerj-cs.48 Fairchild MD, Chen P-H. Brightness, lightness, and specifying color in high-dynamic-range scenes and images. Image Quality and System Performance VIII. SPIE; 2011. pp. 233\u2013246. doi:10.1117/12.872075 Mokrzycki WS, Tatol M. Color difference Delta E - A survey. Machine Graphics and Vision. 2011;20: 383\u2013411. Available: https://www.semanticscholar.org/paper/Color-difference-Delta-E-A-survey/67d9178f7bad9686c002b721138e26124f6e2e35","title":"References"}]}